apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: build-and-push
  namespace: argocd
spec:
  entrypoint: build-and-push
  serviceAccountName: default
  volumeClaimTemplates:
    - metadata:
        name: workdir
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
  templates:
    - name: build-and-push
      steps:
        - - name: generate-parameter
            template: hello-world-to-file
        - - name: consume-parameter
            template: print-message-two
            arguments:
              parameters:
                - name: message
                  value: "{{steps.generate-parameter.outputs.parameters.hello-param}}"
        - - name: git-clone
            template: git-clone
        - - name: print-message
            template: print-message
            arguments:
              parameters:
                - name: passed-tag
                  value: "{{steps.git-clone.outputs.parameters.tag}}"
        - - name: build-image
            template: build-image
            arguments:
              parameters:
                - name: tag
                  value: "{{steps.git-clone.outputs.parameters.tag}}"
        - - name: deploy
            template: deploy
            arguments:
              parameters:
                - name: tag
                  value: "{{steps.git-clone.outputs.parameters.tag}}"

    - name: git-clone
      outputs:
        parameters:
          - name: tag
            valueFrom:
              path: /mnt/vol/app/tag.txt
      container:
        image: alpine/git
        command: ["/bin/sh", "-c"]
        args:
          - |
            rm -rf /mnt/vol/app && \
            git clone https://github.com/sylvainkalache/deploy-buildpack-containerized-python-app-to-argo.git /mnt/vol/app && \
            cd /mnt/vol/app && \
            tag=$(git describe --tags --always) && \
            echo $tag && \
            echo $tag > /mnt/vol/app/tag.txt
        volumeMounts:
          - name: workdir
            mountPath: /mnt/vol

    - name: print-message
      inputs:
        parameters:
          - name: passed-tag
      container:
        image: busybox
        command: [echo]
        args: ["{{inputs.parameters.passed-tag}}"]

    - name: build-image
      inputs:
        parameters:
          - name: tag
      container:
        image: buildpacksio/pack
        command:
          - /bin/bash
          - -c
          - "pack build 172.31.17.128:5000/my-python-app:{{inputs.parameters.tag}} --path /mnt/vol/app --builder paketobuildpacks/builder-jammy-base --publish --network host"
      volumeMounts:
        - name: docker-sock
          mountPath: /var/run/docker.sock
        - name: workdir
          mountPath: /mnt/vol
      securityContext:
        privileged: true

    - name: deploy
      inputs:
        parameters:
          - name: tag
      resource:
        action: apply
        manifest: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: my-python-app
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: my-python-app
            template:
              metadata:
                labels:
                  app: my-python-app
              spec:
                containers:
                  - name: my-python-app
                    image: 172.31.17.128:5000/my-python-app:{{inputs.parameters.tag}}

    - name: hello-world-to-file
      container:
        image: busybox
        command: [sh, -c]
        args: ["sleep 1; echo -n hello world > /tmp/hello_world.txt"]
      outputs:
        parameters:
          - name: hello-param
            valueFrom:
              default: "Foobar"
              path: /tmp/hello_world.txt

    - name: print-message-two
      inputs:
        parameters:
          - name: message
      container:
        image: busybox
        command: [echo]
        args: ["{{inputs.parameters.message}}"]

  volumes:
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock

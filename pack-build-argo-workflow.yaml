apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: build-and-push-
  namespace: argocd
spec:
  entrypoint: build-and-push
  serviceAccountName: default
  volumeClaimTemplates:
    - metadata:
        name: workdir
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
  templates:
    - name: build-and-push
      steps:
        - - name: git-clone
            template: git-clone
        - - name: build-image
            template: build-image
            arguments:
              parameters:
                - name: passed-tag
                  value: "{{steps.git-clone.outputs.parameters.tag}}"
        - - name: deploy
            template: deploy
            arguments:
              parameters:
                - name: passed-tag
                  value: "{{steps.git-clone.outputs.parameters.tag}}"

    - name: git-clone
      outputs:
        parameters:
          - name: tag
            valueFrom:
              path: /mnt/vol/app/tag.txt
      container:
        image: alpine/git
        command: ["/bin/sh", "-c"]
        args:
          - |
            rm -rf /mnt/vol/app && \
            git clone https://github.com/sylvainkalache/deploy-buildpack-containerized-python-app-to-argo.git /mnt/vol/app && \
            cd /mnt/vol/app && \
            tag=$(git describe --tags --always) && \
            echo $tag && \
            echo $tag > /mnt/vol/app/tag.txt
        volumeMounts:
          - name: workdir
            mountPath: /mnt/vol

    - name: build-image
      inputs:
        parameters:
          - name: passed-tag
      container:
        image: buildpacksio/pack
        command: ["pack", "build"]
        args:
          - "172.31.17.128:5000/my-python-app:{{inputs.parameters.passed-tag}}"
          - "--path"
          - "/mnt/vol/app"
          - "--builder"
          - "paketobuildpacks/builder-jammy-base"
          - "--publish"
          - "--network"
          - "host"
        volumeMounts:
          - name: docker-sock
            mountPath: /var/run/docker.sock
          - name: workdir
            mountPath: /mnt/vol
        securityContext:
          privileged: true

    - name: deploy
      inputs:
        parameters:
          - name: passed-tag
      script:
        image: bitnami/kubectl
        command: ["/bin/sh", "-c"]
        source: |
          chmod +x /argo/staging/script && sed "s/{{inputs.parameters.passed-tag}}/${passed_tag}/g" deployment.yaml | kubectl apply -f -

  volumes:
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock

